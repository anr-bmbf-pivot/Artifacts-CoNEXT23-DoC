From f1912768a0c78e786be93148b231f07f0e6837ba Mon Sep 17 00:00:00 2001
From: Martine Lenders <m.lenders@fu-berlin.de>
Date: Fri, 24 Sep 2021 13:28:00 +0200
Subject: [PATCH 2/5] gcoap_dns: add optional asynchronous functionality

---
 makefiles/pseudomodules.inc.mk        |   1 +
 sys/include/net/gcoap/dns.h           | 126 ++++++++++++++++++++-
 sys/net/application_layer/gcoap/dns.c | 157 ++++++++++++--------------
 3 files changed, 199 insertions(+), 85 deletions(-)

diff --git a/makefiles/pseudomodules.inc.mk b/makefiles/pseudomodules.inc.mk
index a6668827ad..3f83a4f02c 100644
--- a/makefiles/pseudomodules.inc.mk
+++ b/makefiles/pseudomodules.inc.mk
@@ -72,6 +72,7 @@ PSEUDOMODULES += gcoap_fileserver
 PSEUDOMODULES += gcoap_dtls
 ## Enable @ref net_gcoap_dns
 PSEUDOMODULES += gcoap_dns
+PSEUDOMODULES += gcoap_dns_async
 ## Enable the @ref gcoap_dns_server_proxy_set function
 PSEUDOMODULES += gcoap_dns_proxied
 PSEUDOMODULES += gcoap_dns_oscore
diff --git a/sys/include/net/gcoap/dns.h b/sys/include/net/gcoap/dns.h
index 7729a845ab..9fe49cd380 100644
--- a/sys/include/net/gcoap/dns.h
+++ b/sys/include/net/gcoap/dns.h
@@ -36,6 +36,10 @@
 #include "net/coap.h"
 #include "net/gcoap.h"
 
+#if IS_USED(MODULE_GCOAP_DNS_OSCORE)
+#include "oscore/helpers.h"
+#endif
+
 #ifdef __cplusplus
 extern "C" {
 #endif
@@ -82,6 +86,89 @@ extern "C" {
 #endif
 /** @} */
 
+/**
+ * @brief   Forward type declaration of struct gcoap_dns_ctx
+ */
+typedef struct gcoap_dns_ctx gcoap_dns_ctx_t;
+
+/**
+ * @brief   Callback for asynchronous operation
+ *
+ * @note    Requires module `gcoap_dns_async` to be used.
+ *
+ * @param[in] The context for the asynchronous DNS query.
+ */
+typedef void (*gcoap_dns_async_cb_t)(gcoap_dns_ctx_t *ctx);
+
+/**
+ * @brief   Context for a DNS query-response-pair.
+ */
+struct gcoap_dns_ctx {
+    union {
+        /**
+         * @brief   Synchronization mutex for synchronous use
+         */
+        mutex_t resp_wait;
+        /**
+         * @brief   Callback for asynchronous use
+         */
+        gcoap_dns_async_cb_t cb;
+    } sync;                 /**< Synchronization primitives */
+    /**
+     * @brief The CoAP request packet
+     *
+     * Only needs to have coap_pkt_t::payload and coap_pkt_t::payload_len
+     * initialized.
+     */
+    coap_pkt_t *pkt;
+#if IS_USED(MODULE_DNS_CACHE) || defined(DOXYGEN)
+    /**
+     * @brief   The queried hostname
+     *
+     * Only required for DNS caching and thus only available with module @ref net_dns_cache
+     */
+    const char *domain_name;
+#endif
+    void *dns_buf;          /**< The buffer for the DNS message exchange */
+    void *addr_out;         /**< Pointer to the resulting address */
+    /**
+     * @brief   Status for the DNS message exchange
+     *
+     * - length of gcoap_dns_ctx_t::addr_out in bytes on success
+     * - -EBADMSG, when receiving erroneous response or response containing
+     * - -EDESTADDRREQ, if CoAP response was received from an unexpected remote.
+     * - -EINVAL, when block-wise transfer can not be completed.
+     * - -ENOBUFS, if length of received CoAP body is greater than
+     *   @ref CONFIG_DNS_MSG_LEN.
+     * - -ENOMSG, if CoAP response did not contain a DNS response.
+     * - -ETIMEDOUT, if CoAP request timed out.
+     */
+    int res;
+#if IS_USED(MODULE_GCOAP_DNS_ASYNC)
+    uint8_t flags;          /**< Flags */
+#endif
+    uint8_t dns_buf_len;    /**< Length of gcoap_dns_ctx_t::dns_buf */
+    int8_t family;          /**< Address family to resolve */
+    /**
+     * @brief The current block number for block-wise transfer
+     *
+     * Leave unset on function call.
+     */
+    uint8_t cur_blk_num;
+#if IS_USED(MODULE_GCOAP_DNS_OSCORE)
+    oscore_requestid_t oscore_request_id;
+#endif
+#if IS_USED(MODULE_GCOAP_DNS_ASYNC) || IS_USED(MODULE_GCOAP_DTLS) || defined(DOXYGEN)
+    /**
+     * @brief   Request tag to rule out potential request reordering attacks
+     *
+     * @todo    Also use for OSCORE when using block-wise support for OSCORE
+     *          was added
+     */
+    uint16_t req_tag;
+#endif
+};
+
 /**
  * @brief   Query a domain name via CoAP synchronously
  *
@@ -99,7 +186,9 @@ extern "C" {
  * @return  -ECONNREFUSED, if no URI is set for the client (see @ref gcoap_dns_server_uri_set()).
  * @return  -EDESTADDRREQ, if CoAP response was received from an unexpected
  *          remote.
- * @return  -EHOSTUNREACH, if the hostname of the URI can not be resolved
+ * @return  -EHOSTUNREACH, if the hostname of the URI template can not be
+ *          resolved
+ * @return  -EINVAL, if the URI template was not processable.
  * @return  -ENOBUFS, if there was not enough buffer space for the request.
  * @return  -ENOBUFS, if length of received CoAP body is greater than
  *          @ref CONFIG_DNS_MSG_LEN.
@@ -111,6 +200,41 @@ extern "C" {
  */
 int gcoap_dns_query(const char *domain_name, void *addr_out, int family);
 
+
+/**
+ * @brief   Query a domain name via CoAP asynchronously
+ *
+ * @note    Only available with module `gcoap_dns_async` compiled in.
+ *
+ * @param[in] domain_name   A '\0'-terminated domain name. Must not be NULL.
+ * @param[out] addr_out     The resolved address. Must not be NULL.
+ * @param[in] family        The desired address family for @p addr_out.
+ *                          @ref AF_UNSPEC for any address family (an IPv6
+ *                          address will take preference over an IPv4 address).
+ *
+ * @return  length of @p addr_out in bytes on success
+ * @return  -EAFNOSUPPORT, if the hostname of the URI resolves to an unknown address family.
+ * @return  -EBADMSG, when receiving erroneous response or response containing
+ *          an error code.
+ * @return  -ECONNABORTED, if CoAP request cannot be sent.
+ * @return  -ECONNREFUSED, if no URI is set for the client (see @ref gcoap_dns_server_uri_set()).
+ * @return  -EDESTADDRREQ, if CoAP response was received from an unexpected
+ *          remote.
+ * @return  -EHOSTUNREACH, if the hostname of the URI template can not be
+ *          resolved
+ * @return  -EINVAL, if the URI template was not processable.
+ * @return  -ENOBUFS, if there was not enough buffer space for the request.
+ * @return  -ENOBUFS, if length of received CoAP body is greater than
+ *          @ref CONFIG_DNS_MSG_LEN.
+ * @return  -ENOENT, if Zone-ID of the URI can not be found locally.
+ * @return  -ENOMSG, if CoAP response did not contain a DNS response.
+ * @return  -ENOTRECOVERABLE, on gCoAP-internal error.
+ * @return  -ENOTSUP, if credential can not be added for to client.
+ * @return  -ENOTSUP, if module `gcoap_dns_async` is not compiled in.
+ * @return  -ETIMEDOUT, if CoAP request timed out.
+ */
+int gcoap_dns_query_async(const char *domain_name, gcoap_dns_ctx_t *ctx);
+
 /**
  * @brief   Sets and checks a URI for a DoC server
  *
diff --git a/sys/net/application_layer/gcoap/dns.c b/sys/net/application_layer/gcoap/dns.c
index 32672b3857..61cf3c08df 100644
--- a/sys/net/application_layer/gcoap/dns.c
+++ b/sys/net/application_layer/gcoap/dns.c
@@ -47,65 +47,7 @@
 #define ENABLE_DEBUG 0
 #include "debug.h"
 
-/**
- * @brief   Context for a DNS query-response-pair.
- */
-typedef struct {
-    /**
-     * @brief   Synchronization mutex to wait for response
-     */
-    mutex_t resp_wait;
-    /**
-     * @brief The CoAP request packet
-     *
-     * Only needs to have coap_pkt_t::payload and coap_pkt_t::payload_len
-     * initialized.
-     */
-    coap_pkt_t *pkt;
-#if IS_USED(MODULE_DNS_CACHE) || defined(DOXYGEN)
-    /**
-     * @brief   The queried hostname
-     *
-     * Only required for DNS caching and thus only available with module @ref net_dns_cache
-     */
-    const char *domain_name;
-#endif
-    void *dns_buf;          /**< The buffer for the DNS message exchange */
-    void *addr_out;         /**< Pointer to the resulting address */
-    /**
-     * @brief   Status for the DNS message exchange
-     *
-     * - length of _req_ctx_t::addr_out in bytes on success
-     * - -EBADMSG, when receiving erroneous response or response containing
-     * - -EDESTADDRREQ, if CoAP response was received from an unexpected remote.
-     * - -EINVAL, when block-wise transfer can not be completed.
-     * - -ENOBUFS, if length of received CoAP body is greater than
-     *   @ref CONFIG_DNS_MSG_LEN.
-     * - -ENOMSG, if CoAP response did not contain a DNS response.
-     * - -ETIMEDOUT, if CoAP request timed out.
-     */
-    int res;
-    uint8_t dns_buf_len;    /**< Length of _req_ctx_t::dns_buf */
-    int8_t family;          /**< Address family to resolve */
-    /**
-     * @brief The current block number for block-wise transfer
-     *
-     * Leave unset on function call.
-     */
-    uint8_t cur_blk_num;
-#if IS_USED(MODULE_GCOAP_DNS_OSCORE)
-    oscore_requestid_t oscore_request_id;
-#endif
-#if IS_USED(MODULE_GCOAP_DTLS) || defined(DOXYGEN)
-    /**
-     * @brief   Request tag to rule out potential request reordering attacks
-     *
-     * @todo    Also use for OSCORE when using block-wise support for OSCORE
-     *          was added
-     */
-    uint16_t req_tag;
-#endif
-} _req_ctx_t;
+#define GCOAP_DNS_ASYNC_FLAG    (1U << 7)
 
 typedef struct {
     credman_type_t type;    /**< Type of the credential */
@@ -141,10 +83,10 @@ static void _remove_cred(sock_dtls_t *sock, _cred_t *cred);
 #endif
 static inline bool _is_proxied(void);
 static int _add_init_block2_opt(coap_pkt_t *pdu);
-static int _add_remaining_options(coap_pkt_t *pdu, const char *proxy_uri, _req_ctx_t *context);
-static int _dns_query(const char *domain_name, _req_ctx_t *req_ctx);
+static int _add_remaining_options(coap_pkt_t *pdu, const char *proxy_uri, gcoap_dns_ctx_t *context);
+static int _dns_query(const char *domain_name, gcoap_dns_ctx_t *req_ctx);
 static ssize_t _send(const void *buf, size_t len, const sock_udp_ep_t *remote,
-                     bool lock_resp_wait, _req_ctx_t *context, gcoap_socket_type_t tl_type);
+                     bool lock_resp_wait, gcoap_dns_ctx_t *context, gcoap_socket_type_t tl_type);
 
 int gcoap_dns_query(const char *domain_name, void *addr_out, int family)
 {
@@ -157,8 +99,10 @@ int gcoap_dns_query(const char *domain_name, void *addr_out, int family)
     static uint8_t coap_buf[CONFIG_GCOAP_DNS_PDU_BUF_SIZE];
     static uint8_t dns_buf[CONFIG_DNS_MSG_LEN];
     coap_pkt_t pdu;
-    _req_ctx_t req_ctx = {
-        .resp_wait = MUTEX_INIT,
+    gcoap_dns_ctx_t req_ctx = {
+        .sync = {
+            .resp_wait = MUTEX_INIT,
+        },
         .pkt = &pdu,
         .dns_buf = dns_buf,
         .addr_out = addr_out,
@@ -170,13 +114,36 @@ int gcoap_dns_query(const char *domain_name, void *addr_out, int family)
     res = _dns_query(domain_name, &req_ctx);
     if (res > 0) {
         /* wait for req_ctx.addr_out to be set */
-        mutex_lock(&req_ctx.resp_wait);
+        mutex_lock(&req_ctx.sync.resp_wait);
         res = req_ctx.res;
     }
     mutex_unlock(&_client_mutex);
     return res;
 }
 
+int gcoap_dns_query_async(const char *domain_name, gcoap_dns_ctx_t *ctx)
+{
+    if (IS_USED(MODULE_GCOAP_DNS_ASYNC)) {
+        int res;
+
+        if ((res = dns_cache_query(domain_name, ctx->addr_out, ctx->family)) > 0) {
+            ctx->res = res;
+            ctx->sync.cb(ctx);
+            return res;
+        }
+#if IS_USED(MODULE_GCOAP_DNS_ASYNC)
+        ctx->flags |= GCOAP_DNS_ASYNC_FLAG;
+#endif
+        ctx->cur_blk_num = 0;
+        ctx->res = 0;
+        mutex_lock(&_client_mutex);
+        res = _dns_query(domain_name, ctx);
+        mutex_unlock(&_client_mutex);
+        return (res > 0) ? 0 : res;
+    }
+    return -ENOTSUP;
+}
+
 int gcoap_dns_server_uri_set(const char *uri)
 {
     int res;
@@ -187,7 +154,7 @@ int gcoap_dns_server_uri_set(const char *uri)
         mutex_unlock(&_client_mutex);
         return 0;
     }
-    if (IS_USED(MODULE_GCOAP_DTLS)) {
+    if (IS_USED(MODULE_GCOAP_DNS_ASYNC) || IS_USED(MODULE_GCOAP_DTLS)) {
         /* reinitialize request tag */
         _req_tag = (uint16_t)random_uint32();
     }
@@ -375,6 +342,16 @@ static inline bool _is_proxied(void)
     return IS_USED(MODULE_GCOAP_DNS_PROXIED) && _proxy[0] != '\0';
 }
 
+static inline bool _is_async(gcoap_dns_ctx_t *ctx)
+{
+#if IS_USED(MODULE_GCOAP_DNS_ASYNC)
+    return ctx->flags & GCOAP_DNS_ASYNC_FLAG;
+#else
+    (void)ctx;
+    return false;
+#endif
+}
+
 static int _add_init_block2_opt(coap_pkt_t *pdu)
 {
     if (CONFIG_GCOAP_DNS_PDU_BUF_SIZE < CONFIG_DNS_MSG_LEN) {
@@ -398,9 +375,9 @@ static int _add_proxy_uri_opt(coap_pkt_t *pdu, const char *proxy_uri)
     return 0;
 }
 
-static int _add_req_tag_opt(coap_pkt_t *pdu, _req_ctx_t *context)
+static int _add_req_tag_opt(coap_pkt_t *pdu, gcoap_dns_ctx_t *context)
 {
-#if IS_USED(MODULE_GCOAP_DTLS)
+#if IS_USED(MODULE_GCOAP_DNS_ASYNC) || IS_USED(MODULE_GCOAP_DTLS)
     if (CONFIG_GCOAP_DNS_PDU_BUF_SIZE < CONFIG_DNS_MSG_LEN) {
         return coap_opt_add_opaque(pdu, 292, (uint8_t *)&context->req_tag,
                                    sizeof(context->req_tag));
@@ -412,7 +389,7 @@ static int _add_req_tag_opt(coap_pkt_t *pdu, _req_ctx_t *context)
     return 0;
 }
 
-static int _add_remaining_options(coap_pkt_t *pdu, const char *proxy_uri, _req_ctx_t *context)
+static int _add_remaining_options(coap_pkt_t *pdu, const char *proxy_uri, gcoap_dns_ctx_t *context)
 {
     if (_add_proxy_uri_opt(pdu, proxy_uri) < 0) {
         DEBUG("gcoap_dns: unable to add Proxy-URI option to request\n");
@@ -548,7 +525,7 @@ static ssize_t _req_init(coap_pkt_t *pdu, uri_parser_result_t *uri_comp, bool co
 }
 
 static int _do_block(coap_pkt_t *pdu, const sock_udp_ep_t *remote,
-                                _req_ctx_t *context)
+                     gcoap_dns_ctx_t *context)
 {
     gcoap_socket_type_t tl_type;
     ssize_t len;
@@ -598,7 +575,7 @@ static bool _oscore_secctx_set(void)
 #endif
 }
 
-static ssize_t _req_oscore(_req_ctx_t *context)
+static ssize_t _req_oscore(gcoap_dns_ctx_t *context)
 {
 #if IS_USED(MODULE_GCOAP_DNS_OSCORE)
     coap_pkt_t *pdu = context->pkt;
@@ -696,7 +673,7 @@ static ssize_t _req_oscore(_req_ctx_t *context)
 #endif
 }
 
-static ssize_t _req(_req_ctx_t *context)
+static ssize_t _req(gcoap_dns_ctx_t *context)
 {
     coap_pkt_t *pdu = context->pkt;
     ssize_t len;
@@ -715,10 +692,12 @@ static ssize_t _req(_req_ctx_t *context)
     else if (_oscore_secctx_set()) {
         int res;
 
-        mutex_lock(&context->resp_wait);
+        if (!_is_async(context)) {
+            mutex_lock(&context->sync.resp_wait);
+        }
         res = _req_oscore(context);
-        if (res < 0) {
-            mutex_unlock(&context->resp_wait);
+        if (!_is_async(context) && (res < 0)) {
+            mutex_unlock(&context->sync.resp_wait);
         }
         return res;
     }
@@ -741,11 +720,16 @@ static ssize_t _req(_req_ctx_t *context)
     }
 }
 
-static int _dns_query(const char *domain_name, _req_ctx_t *req_ctx)
+static int _dns_query(const char *domain_name, gcoap_dns_ctx_t *req_ctx)
 {
     int res;
 
     assert(domain_name != NULL);
+    assert(req_ctx->addr_out != NULL);
+    assert(req_ctx->dns_buf != NULL);
+    assert(req_ctx->pkt != NULL);
+    assert(req_ctx->pkt->payload != NULL);
+    assert(req_ctx->pkt->payload_len > 0U);
     if (!_dns_server_uri_isset()) {
         DEBUG("gcoap_dns: no URI template provided\n");
         return -ECONNREFUSED;
@@ -758,7 +742,7 @@ static int _dns_query(const char *domain_name, _req_ctx_t *req_ctx)
 #if IS_USED(MODULE_DNS_CACHE)
     req_ctx->domain_name = domain_name;
 #endif
-#if IS_USED(MODULE_GCOAP_DTLS)
+#if IS_USED(MODULE_GCOAP_DNS_ASYNC) || IS_USED(MODULE_GCOAP_DTLS)
     req_ctx->req_tag = _req_tag++;
 #endif
     res = _req(req_ctx);
@@ -771,7 +755,7 @@ static int _dns_query(const char *domain_name, _req_ctx_t *req_ctx)
     return res;
 }
 
-static const char *_domain_name_from_ctx(_req_ctx_t *context)
+static const char *_domain_name_from_ctx(gcoap_dns_ctx_t *context)
 {
 #if IS_USED(MODULE_DNS_CACHE)
     return context->domain_name;
@@ -781,7 +765,7 @@ static const char *_domain_name_from_ctx(_req_ctx_t *context)
 #endif
 }
 
-static int _oscore_resp_handler(coap_pkt_t *pdu, _req_ctx_t *context)
+static int _oscore_resp_handler(coap_pkt_t *pdu, gcoap_dns_ctx_t *context)
 {
 #if IS_USED(MODULE_GCOAP_DNS_OSCORE)
     uint8_t *header_data;
@@ -875,7 +859,7 @@ static void _resp_handler(const gcoap_request_memo_t *memo, coap_pkt_t *pdu,
                           const sock_udp_ep_t *remote)
 {
     coap_block1_t block;
-    _req_ctx_t *context = memo->context;
+    gcoap_dns_ctx_t *context = memo->context;
     void *data;
     size_t data_len;
     int family = context->family;
@@ -1012,14 +996,19 @@ static void _resp_handler(const gcoap_request_memo_t *memo, coap_pkt_t *pdu,
             break;
     }
 unlock:
-    mutex_unlock(&context->resp_wait);
+    if (_is_async(context)) {
+        context->sync.cb(context);
+    }
+    else {
+        mutex_unlock(&context->sync.resp_wait);
+    }
 }
 
 static ssize_t _send(const void *buf, size_t len, const sock_udp_ep_t *remote,
-                     bool lock_resp_wait, _req_ctx_t *context, gcoap_socket_type_t tl_type)
+                     bool lock_resp_wait, gcoap_dns_ctx_t *context, gcoap_socket_type_t tl_type)
 {
-    if (lock_resp_wait) {
-        mutex_lock(&context->resp_wait);
+    if (!_is_async(context) && lock_resp_wait) {
+        mutex_lock(&context->sync.resp_wait);
     }
     return gcoap_req_send_tl(buf, len, remote, _resp_handler, context, tl_type);
 }
-- 
2.38.1

